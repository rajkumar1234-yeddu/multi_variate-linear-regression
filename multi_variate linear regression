import numpy as np
from scipy import linalg
from copy import deepcopy

n=int(input("no.of observations : "))
# 12
p=int(input("no.of independent variables : "))
# 3
k=int(input("no.of dependent variables : "))
# 2
y=list(map(int, input("Enter y values rowwise: ").split()))
# 10 100 12 110 11 105 9 94 9 95 10 99 11 104 12 108 11 105 10 98 11 103 12 110
y=np.matrix(y).reshape(n,k)
x=list(map(float, input("Enter x values rowwise: ").split()))
# 1 9 62 1.0 1 8 58 1.3 1 7 64 1.2 1 14 60 .8 1 12 63 .8 1 10 57 .9 1 7 55 1 1 4 56 1.2 1 6 59 1.1 1 5 61 1 1 7 57 1.2 1 6 60 1.2
x=np.matrix(x).reshape(n,p+1)
xt=x.T

print("y=",y)
print("x=",x)
print("xt=",xt)

def invert_matrix(M):
    n = M.shape[0]
    I = np.identity(n=n)
    M = np.concatenate((M, I), axis=1)
    M = np.concatenate((M[np.any(M != 0, axis=1)], M[np.all(M == 0, axis=1)]), axis=0)
    for i in range(0, n):
        j = 1
        pivot = M[i][i]
        while pivot == 0 and i + j < n:
            M[[i, i + j]] = M[[i + j, i]]
            j += 1
            pivot = M[i][i]
        if pivot == 0:
            return M[:, n:]
        row = M[i]
        M[i] = row / pivot
        for j in [k for k in range(0, n) if k != i]:
            M[j] = M[j] - M[i] * M[j][i]
    return M[:, n:]


def smallermatrix(original_matrix,row,coloumns):
    new_matrix=deepcopy(original_matrix)
    new_matrix.remove(original_matrix[row])
    for i in range(len(new_matrix)):
        new_matrix[i].remove(new_matrix[i][coloumns])
    return new_matrix


def determinent(matrix):
    no_rows=len(matrix)
    for row in matrix:
        if len(row)!=no_rows:
            print("not a square matrix")
            return None
    if len(matrix)==2:
        simple_det=(matrix[0][0]*matrix[1][1])-(matrix[1][0]*matrix[0][1])
        return simple_det
    else:
        #cofactor expression
        answer=0
        no_columns=no_rows
        for j in range(no_columns):
            cofactor=((-1) ** (0+j) * matrix[0][j]) * (determinent(smallermatrix(matrix,0,j)))
            answer+=cofactor
        return answer
    
def trans(x):
    a = x.shape
    tr = np.zeros((a[1], a[0]))
    b = tr.shape
    for i in range(0,3):
        for j in range(0,12):
            tr[i,j] = x[j,i]
    return(tr)
    
 
xtx = xt*x
xtx_1 = invert_matrix(np.array(xtx))
xty = xt*y
B = xtx_1*xty
print(B)

print("The output of multivariant linear regression model is :")
print()
print("y1 = ",B[0,0]," + ",B[1,0],"x1 + ",B[2,0],"x2 + ",B[3,0],"x3")
print()
print("y2 = ",B[0,1]," + ",B[1,1],"x1 + ",B[2,1],"x2 + ",B[3,1],"x3")
